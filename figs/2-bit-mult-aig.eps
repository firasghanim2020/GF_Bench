%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 391.834646 372.834646
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12 (Build 16A323) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 373 355
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 373 355
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: Times-Roman
%!FontType1-1.0: Times-Roman 1.0000.0.0000
14 dict begin/FontName /Times-Roman def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /m put
dup 34 /zero put
dup 35 /one put
dup 36 /two put
dup 37 /three put
dup 38 /nine put
dup 39 /four put
dup 40 /eight put
dup 41 /six put
dup 42 /a put
dup 43 /b put
dup 44 /seven put
dup 45 /five put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -416 1 index div -877 2 index div 3482 3 index div 2604 5 -1 roll div]cvx def
/sfnts [<









00>] def
/CharStrings 17 dict dup begin
/.notdef 0 def
/zero 1 def
/one 2 def
/two 3 def
/three 4 def
/four 5 def
/five 6 def
/six 7 def
/seven 8 def
/eight 9 def
/nine 10 def
/a 11 def
/b 12 def
/m 13 def
/macron 14 def
/dcroat 15 def
/dong 16 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-416 -877 3482 2604}def
/UniqueID 4416489 def
currentdict currentfile eexec




0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/Times-Roman cguidfix
/F1.1/Times-Roman renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 372.24292 354.1929 rc
-254.20354 567.54645 m
843.04645 567.54645 l
843.04645 -176.30354 l
-254.20354 -176.30354 l
h
-254.20354 567.54645 m
f
Q
9.2307701 w
1 M
0.60000002 i
/Cs2 SC
1 0.49145499 0.313721 sc
T soprm
q
1.6232269 352.11337 m
370.55237 352.11337 l
370.55237 2.0346489 l
1.6232269 2.0346489 l
h
1.6232269 352.11337 m
W
0 0 372.24292 354.1929 rc
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
1550.77 4716.9302 m
1959.6 5035.3901 l
1141.9399 5035.3901 l
h
S
0 0 0 sc
0.94999999 0 0 0.94999999 -97.745277 -130.99527 cm
/F1.1[ 12.9231 0 0 12.9231 0 0]sf
146.769 489.508 m
(!")[ 10.104248 0.000000 ] xS
1 0.49145499 0.313721 sc
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
2529.23 4716.9302 m
2938.0601 5035.3901 l
2120.3999 5035.3901 l
h
S
0 0 0 sc
0.94999999 0 0 0.94999999 -97.745277 -130.99527 cm
244.61501 489.508 m
(!#)[ 10.104248 0.000000 ] xS
1 0.49145499 0.313721 sc
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
3507.6899 4716.9302 m
3916.52 5035.3901 l
3098.8601 5035.3901 l
h
S
0 0 0 sc
0.94999999 0 0 0.94999999 -97.745277 -130.99527 cm
342.46201 489.508 m
(!$)[ 10.104248 0.000000 ] xS
1 0.49145499 0.313721 sc
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
4486.1602 4716.9302 m
4894.98 5035.3901 l
4077.3201 5035.3901 l
h
S
0 0 0 sc
0.94999999 0 0 0.94999999 -97.745277 -130.99527 cm
440.30801 489.508 m
(!%)[ 10.104248 0.000000 ] xS
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
1800 4218.46 m
1800 4310.2202 1688.41 4384.6201 1550.77 4384.6201 c
1413.13 4384.6201 1301.54 4310.2202 1301.54 4218.46 c
1301.54 4126.7002 1413.13 4052.3101 1550.77 4052.3101 c
1688.41 4052.3101 1800 4126.7002 1800 4218.46 c
S
0.94999999 0 0 0.94999999 -97.745277 -130.99527 cm
151.38499 418.431 m
(&)s
18.4615 w
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
1550.77 4623.23 m
1550.77 4541.8198 1550.77 4456.6201 1550.77 4386.2798 c
S
CM
46.508419 308.25528 m
49.577869 317.02472 l
52.64732 308.25528 l
f
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
1518.46 4623.6899 m
1550.77 4716 l
1583.08 4623.6899 l
h
S
9.2307701 w
2778.46 4218.46 m
2778.46 4310.2202 2666.8799 4384.6201 2529.23 4384.6201 c
2391.5901 4384.6201 2280 4310.2202 2280 4218.46 c
2280 4126.7002 2391.5901 4052.3101 2529.23 4052.3101 c
2666.8799 4052.3101 2778.46 4126.7002 2778.46 4218.46 c
S
0.94999999 0 0 0.94999999 -97.745277 -130.99527 cm
246 418.431 m
(#')[ 6.923299 0.000000 ] xS
18.4615 w
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
2529.23 4623.23 m
2529.23 4541.8198 2529.23 4456.6201 2529.23 4386.2798 c
S
CM
139.46211 308.25528 m
142.53157 317.02472 l
145.60101 308.25528 l
f
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
2496.9199 4623.6899 m
2529.23 4716 l
2561.54 4623.6899 l
h
S
9.2307701 w
3775.3899 4218.46 m
3775.3899 4310.2202 3663.8 4384.6201 3526.1499 4384.6201 c
3388.51 4384.6201 3276.9199 4310.2202 3276.9199 4218.46 c
3276.9199 4126.7002 3388.51 4052.3101 3526.1499 4052.3101 c
3663.8 4052.3101 3775.3899 4126.7002 3775.3899 4218.46 c
S
0.94999999 0 0 0.94999999 -97.745277 -130.99527 cm
345.69199 418.431 m
(#\()[ 6.923299 0.000000 ] xS
18.4615 w
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
3515.54 4626.6499 m
3517.6599 4544.8599 3519.97 4459.02 3521.9099 4388.0298 c
S
CM
233.16156 308.53647 m
235.99446 317.38477 l
239.29097 308.69418 l
f
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
3483.23 4626.6499 m
3513.05 4719.79 l
3547.75 4628.3101 l
h
S
9.2307701 w
4440 3553.8501 m
4440 3645.6101 4328.4102 3720 4190.77 3720 c
4053.1299 3720 3941.54 3645.6101 3941.54 3553.8501 c
3941.54 3462.0901 4053.1299 3387.6899 4190.77 3387.6899 c
4328.4102 3387.6899 4440 3462.0901 4440 3553.8501 c
S
0.94999999 0 0 0.94999999 -97.745277 -130.99527 cm
412.15399 351.96899 m
(#\))[ 6.923299 0.000000 ] xS
18.4615 w
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
4428.1802 4653.79 m
4367.6299 4375.6602 4274.6802 3948.74 4225.02 3720.1799 c
S
CM
319.9678 311.90326 m
324.82706 319.81393 l
325.95758 310.59702 l
f
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
4396.98 4662.0898 m
4448.1299 4745.3599 l
4460.0298 4648.3398 l
h
S
9.2307701 w
1 0.49145499 0.313721 sc
1449.23 1726.15 m
1093.9399 1407.6899 l
1804.52 1407.6899 l
h
S
0 0 0 sc
0.94999999 0 0 0.94999999 -97.745277 -130.99527 cm
138.46201 147.96899 m
(*")[ 6.099981 0.000000 ] xS
18.4615 w
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
1541.17 3955.3899 m
1521.05 3423.23 1474.89 2200.8 1456.71 1721.26 c
S
CM
45.604969 245.03847 m
48.999321 253.68442 l
51.735321 244.80096 l
f
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
1508.95 3958.25 m
1544.6801 4049.26 l
1573.48 3955.75 l
h
S
9.2307701 w
1 0.49145499 0.313721 sc
2344.6201 1726.15 m
1975.85 1407.6899 l
2713.3899 1407.6899 l
h
S
0 0 0 sc
0.94999999 0 0 0.94999999 -97.745277 -130.99527 cm
227.539 147.96899 m
(+")[ 6.923299 0.000000 ] xS
18.4615 w
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
1623.14 3964.25 m
1782.92 3423.6899 2162.03 2140.98 2296.3401 1686.37 c
S
CM
53.49757 244.77531 m
53.96212 254.06157 l
59.390419 246.52048 l
f
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
1592.03 3955.48 m
1596.92 4053.23 l
1654.0601 3973.8501 l
h
S
9.2307701 w
2760 3553.8501 m
2760 3645.6101 2648.4099 3720 2510.77 3720 c
2373.1299 3720 2261.54 3645.6101 2261.54 3553.8501 c
2261.54 3462.0901 2373.1299 3387.6899 2510.77 3387.6899 c
2648.4099 3387.6899 2760 3462.0901 2760 3553.8501 c
S
0.94999999 0 0 0.94999999 -97.745277 -130.99527 cm
244.15401 351.96899 m
(#%)[ 6.923299 0.000000 ] xS
[
10
60
] 0 d
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
2522.03 3956.95 m
2519.72 3877.3899 2517.3201 3791.9099 2515.29 3720.9199 c
S
CM
138.77812 245.02898 m
142.10217 253.71101 l
144.91702 244.85417 l
f
[] 0 d
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
2489.72 3958.1499 m
2524.71 4049.54 l
2554.3401 3956.3101 l
h
S
3618.46 2889.23 m
3618.46 2980.99 3506.8799 3055.3899 3369.23 3055.3899 c
3231.5901 3055.3899 3120 2980.99 3120 2889.23 c
3120 2797.47 3231.5901 2723.0801 3369.23 2723.0801 c
3506.8799 2723.0801 3618.46 2797.47 3618.46 2889.23 c
S
0.94999999 0 0 0.94999999 -97.745277 -130.99527 cm
330 285.508 m
(#$)[ 6.923299 0.000000 ] xS
[
10
60
] 0 d
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
2673.05 3985.2 m
2726.3999 3901.9399 2787.51 3806.6799 2843.0801 3720 c
2994.8301 3483.3201 3170.95 3208.1599 3276.0901 3043.9399 c
S
CM
153.55441 246.02077 m
151.40552 255.05241 l
158.72812 249.33533 l
f
[] 0 d
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
2645.26 3968.5901 m
2622.6399 4063.6599 l
2699.72 4003.48 l
h
S
[
10
60
] 0 d
3729.6001 4011.4099 m
3834.9199 3909.05 3960.6499 3786.8301 4054.1599 3695.8201 c
S
CM
254.16417 248.14212 m
250.01646 256.45557 l
258.44391 252.54442 l
f
[] 0 d
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
3704.3101 3990.9199 m
3660.6499 4078.4299 l
3749.3601 4037.26 l
h
S
3775.3899 3553.8501 m
3775.3899 3645.6101 3663.8 3720 3526.1499 3720 c
3388.51 3720 3276.9199 3645.6101 3276.9199 3553.8501 c
3276.9199 3462.0901 3388.51 3387.6899 3526.1499 3387.6899 c
3663.8 3387.6899 3775.3899 3462.0901 3775.3899 3553.8501 c
S
0.94999999 0 0 0.94999999 -97.745277 -130.99527 cm
345.69199 351.96899 m
(#,)[ 6.923299 0.000000 ] xS
[
10
60
] 0 d
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
3526.1499 3956.95 m
3526.1499 3877.3899 3526.1499 3791.9099 3526.1499 3720.9199 c
S
CM
234.17047 244.94157 m
237.23897 253.71101 l
240.30841 244.94157 l
f
[] 0 d
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
3493.8501 3957.23 m
3526.1499 4049.54 l
3558.46 3957.23 l
h
S
3461.54 2224.6201 m
3461.54 2316.3799 3349.95 2390.77 3212.3101 2390.77 c
3074.6599 2390.77 2963.0801 2316.3799 2963.0801 2224.6201 c
2963.0801 2132.8601 3074.6599 2058.46 3212.3101 2058.46 c
3349.95 2058.46 3461.54 2132.8601 3461.54 2224.6201 c
S
0.94999999 0 0 0.94999999 -97.745277 -130.99527 cm
314.30801 219.04601 m
(#")[ 6.923299 0.000000 ] xS
[
10
60
] 0 d
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
2636.3999 3309.8799 m
2780.3101 3040.98 3011.72 2608.52 3132.74 2382.46 c
S
CM
149.85417 182.27672 m
148.42442 191.45847 l
155.26442 185.17992 l
f
[] 0 d
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
2606.3101 3297.6001 m
2591.26 3394.25 l
2663.26 3328.1599 l
h
S
2769.23 2224.6201 m
2769.23 2316.3799 2657.6399 2390.77 2520 2390.77 c
2382.3601 2390.77 2270.77 2316.3799 2270.77 2224.6201 c
2270.77 2132.8601 2382.3601 2058.46 2520 2058.46 c
2657.6399 2058.46 2769.23 2132.8601 2769.23 2224.6201 c
S
0.94999999 0 0 0.94999999 -97.745277 -130.99527 cm
245.077 219.04601 m
(##)[ 6.923299 0.000000 ] xS
[
10
60
] 0 d
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
2512.52 3292.4299 m
2514.46 3026.6799 2517.3201 2616.1799 2518.8899 2392.52 c
S
CM
137.87466 181.93472 m
140.88332 190.72127 l
144.01357 181.97842 l
f
[] 0 d
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
2480.21 3294 m
2511.8799 3386.49 l
2544.8301 3294.46 l
h
S
18.4615 w
3963.1399 3365.54 m
3823.9399 3256.1599 3649.5701 3118.98 3525.8799 3021.6899 c
S
CM
276.91098 191.18677 m
285.69846 194.19447 l
280.69955 186.36362 l
f
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
3943.75 3391.3899 m
4036.25 3423.05 l
3983.6299 3340.6201 l
h
S
9.2307701 w
4301.54 2889.23 m
4301.54 2980.99 4189.9502 3055.3899 4052.3101 3055.3899 c
3914.6599 3055.3899 3803.0801 2980.99 3803.0801 2889.23 c
3803.0801 2797.47 3914.6599 2723.0801 4052.3101 2723.0801 c
4189.9502 2723.0801 4301.54 2797.47 4301.54 2889.23 c
S
0.94999999 0 0 0.94999999 -97.745277 -130.99527 cm
398.30801 285.508 m
(#-)[ 6.923299 0.000000 ] xS
18.4615 w
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
4137.4199 3295.48 m
4120.25 3215.6299 4101.79 3129.51 4086.46 3057.97 c
S
CM
292.35416 182.95218 m
297.19443 190.87993 l
298.36102 181.66302 l
f
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
4106.3101 3304.71 m
4157.2598 3388.1599 l
4169.54 3291.1399 l
h
S
9.2307701 w
[
10
60
] 0 d
3466.25 3298.0601 m
3446.6799 3217.5701 3425.54 3130.3401 3408 3057.97 c
S
CM
228.57497 183.08327 m
233.62706 190.87993 l
234.54762 181.63643 l
f
[] 0 d
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
3434.95 3306.0901 m
3488.1299 3388.1599 l
3497.8201 3290.8601 l
h
S
[
10
60
] 0 d
3699.97 3331.1101 m
3778.4299 3234.8301 3868.8 3123.8799 3938.3999 3038.3999 c
S
CM
251.24387 183.68842 m
248.08702 192.42271 l
256.00528 187.56442 l
f
[] 0 d
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
3673.5701 3312.46 m
3640.3401 3404.3999 l
3723.6899 3353.26 l
h
S
18.4615 w
3309.3201 2633.45 m
3289.75 2552.95 3268.6201 2465.72 3251.0801 2393.3601 c
S
CM
213.66757 119.94532 m
218.71872 127.74102 l
219.63927 118.49847 l
f
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
3278.03 2641.48 m
3331.2 2723.54 l
3340.8899 2626.25 l
h
S
3133.3899 2700.55 m
2988.55 2590.3401 2806.8899 2452.1499 2679.05 2354.8601 c
S
CM
198.32127 128.18848 m
207.16101 131.05557 l
202.03957 123.30357 l
f
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
3116.49 2728.25 m
3209.54 2758.4299 l
3155.6299 2676.8301 l
h
S
9.2307701 w
1 0.49145499 0.313721 sc
4153.8501 1726.15 m
3798.55 1407.6899 l
4509.1401 1407.6899 l
h
S
0 0 0 sc
0.94999999 0 0 0.94999999 -97.745277 -130.99527 cm
408.923 147.96899 m
(*#)[ 6.099981 0.000000 ] xS
18.4615 w
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
4071.1399 2628.1799 m
4090.8899 2364 4121.54 1954.52 4139.4502 1715.26 c
S
CM
285.94357 118.59442 m
288.34708 127.56527 l
292.06442 119.05042 l
f
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
4038.8301 2627.26 m
4064.1299 2721.6899 l
4103.2598 2632.0601 l
h
S
9.2307701 w
1 0.49145499 0.313721 sc
3258.46 1726.15 m
2889.6899 1407.6899 l
3627.23 1407.6899 l
h
S
0 0 0 sc
0.94999999 0 0 0.94999999 -97.745277 -130.99527 cm
318.923 147.96899 m
(+#)[ 6.923299 0.000000 ] xS
18.4615 w
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
3918.0901 2650.52 m
3751.6599 2366.03 3473.45 1890.46 3337.75 1658.59 c
S
CM
271.93011 122.54073 m
279.00763 128.56467 l
277.22733 119.44467 l
f
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
3891.3201 2668.8 m
3965.8201 2732.21 l
3947.0801 2636.21 l
h
S
3453.1399 2038.34 m
3636.46 1903.5699 3881.45 1723.39 4027.8501 1615.75 c
S
CM
228.25102 60.340424 m
223.00702 68.013573 l
231.89047 65.287071 l
f
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
3431.54 2014.0601 m
3376.3401 2094.8301 l
3469.8501 2066.1299 l
h
S
2980.8 2030.6801 m
2815.8501 1899.05 2600.5901 1727.36 2467.5701 1621.2 c
S
CM
183.91357 64.637276 m
192.68301 67.706726 l
187.74586 59.840725 l
f
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
2964.8301 2059.29 m
3057.1399 2091.6001 l
3005.1699 2008.8 l
h
S
2267.6299 2052.28 m
2053.48 1913.8199 1754.59 1720.52 1583.54 1609.9399 c
S
CM
116.27642 66.715874 m
125.30902 68.898972 l
119.61757 61.559273 l
f
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
2252.8601 2081.1699 m
2347.9399 2104.1499 l
2288.03 2026.89 l
h
S
2729.54 2018.95 m
2864.21 1892.6801 3034.0601 1733.45 3144.3701 1630.0601 c
S
CM
159.14897 58.858425 m
154.85211 67.093025 l
163.34987 63.339573 l
f
0.094999999 0 0 0.094999999 -97.745277 -130.99527 cm
2704.1499 1998.46 m
2658.9199 2085.1399 l
2748.3701 2045.63 l
h
S
ep
end
